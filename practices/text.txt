# positioning & sizing grid-items inside a grid 

  grid-row-start: start-line;
  grid-row-end: end-line;

  grid-column-start: start-line;
  grid-column-end: end-line;


# grid-items alignment(align a single grid-item using )
  
  justify-self: center | end ;
  align-self: center | end;


# grid-container-sizing 

  grid-template-rows: 100px 100px 100px;
  grid-template-columns: repeat(3, 1fr);
  row-gap: 10px;
  column-gap: 10px;
  grid-auto-rows: minmax(50px, auto);
  grid-auto-columns: minmax(50px, auto)


# grid gutters is basically adding some space/padding between grid-items(container properties)

  row-gap: 10px; used to add some gap between rows

  column-gap: 10px; used to add some gap between columns


# css grid flow algorithm (container properties) specifying exactly how auto-placed items get flowed into the grid.

  grid-auto-flow: row(default) | column(items will stack vertically and then split over to the next column)


# grid container alignment

  grid-template-area:;
  justify-items: ;
  align-items: ;
  justify-content: ;
  align-content: ;


# positioning and sizing items using grid-area

  grid-template-areas: the value of this are the grid-area aliases of grid-item, by which we can position our grid. For example:

  grid-template-areas: 
    "gi1-alias gi1-alias gr3-alias" 
    "gi2-alias .         gi3-alias"
    ".         .         gi3-alias" ; (.(period/dot) means this column will be empty)

  // here each ""inverted comma block is a row and each grid-area aliases indicate a column. 
  Now grid-area aliases should be defined on the grid-item.

  .grid-item1 {
    grid-area: gi1-alias;
  }
  .grid-item2 {
    grid-area: gi2-alias;
  }
  .grid-item3 {
    grid-area: gi3-alias;
  }


    

# align all-grid items globally from container 
 
  justify-items: center | end | start | etc.;
  align-items: center | end | start | etc.;


# how to align the entire grid 
 
  justify-content: center | end 
  align-content: center | end


# Explicit vs Implicit Grid: to control implicit grid-items. 
/*
For example we've a grid container with 300px width and added 5 grid-items. 

Now, on the container, 
`grid-template-columns: repeat(4, 1fr)`
`grid-template-rows: 1fr`

Above code means, the grid have to be 4 column and in 1 row. Since we have 5 items, 4 items will be on 1st row and the remaining 1 item will be on implicit grid and implicitly it will be on the 2nd row (it's content size will be the row size) though we explicitly wrote only 1 row. 

Similarly/At the same time there can be implicit columns too.

Here comes 2 properties to control those implicit rows and columns

`
grid-auto-rows: 100px; (the height of implicit rows or each additional rows height)
grid-auto-columns: 100px; (the width of implicit columns width or each additional columns width)
`

*/

  



# shorthand css grid
  
  grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end

  grid-row: grid-row-start / grid-row-end

  grid-column: grid-column-start / grid-column-end


  grid: grid-auto-columns / grid-auto-flow 
  /  grid-auto-rows / grid-template-areas /   grid-template-columns / grid-template-rows

  grid-template: grid-template-columns / grid-template-rows / grid-template-areas

  gap (grid-gap): row-gap(grid-row-gap) / column-gap(grid-column-gap)





### Using css grid and flexbox together(when to use flexbox vs grid)

# Use grid when:
  - You need full control of rows AND column(full-page layout, gallery items)
  - You want to explicitly define the layout regardless of content size(i.e if you are using flexbox and it starts to get really complicated with a bunch of heights and widths, you probably should be using grid)

# Use flexbox when:
  - Your content is a row OR column (example: horizontal navbar, vertical navbar)
  - You want the of items to determine layout.